# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from event_stats_client.models.additional_section_place_stats import AdditionalSectionPlaceStats
from event_stats_client.models.input_event_stats_schema_section_prices_value_inner import InputEventStatsSchemaSectionPricesValueInner
from event_stats_client.models.input_place_section_stats import InputPlaceSectionStats
from event_stats_client.models.input_price_section_stats import InputPriceSectionStats
from event_stats_client.models.section_stats import SectionStats
from typing import Optional, Set
from typing_extensions import Self

class InputEventStatsSchema(BaseModel):
    """
    InputEventStatsSchema
    """ # noqa: E501
    available: Optional[SectionStats]
    removed: Optional[InputPlaceSectionStats]
    added: Optional[InputPriceSectionStats]
    changed: Optional[InputPlaceSectionStats]
    section_prices: Optional[Dict[str, List[InputEventStatsSchemaSectionPricesValueInner]]]
    additional: Optional[Dict[str, AdditionalSectionPlaceStats]]
    __properties: ClassVar[List[str]] = ["available", "removed", "added", "changed", "section_prices", "additional"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InputEventStatsSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of available
        if self.available:
            _dict['available'] = self.available.to_dict()
        # override the default output from pydantic by calling `to_dict()` of removed
        if self.removed:
            _dict['removed'] = self.removed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of added
        if self.added:
            _dict['added'] = self.added.to_dict()
        # override the default output from pydantic by calling `to_dict()` of changed
        if self.changed:
            _dict['changed'] = self.changed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in section_prices (dict of array)
        _field_dict_of_array = {}
        if self.section_prices:
            for _key_section_prices in self.section_prices:
                if self.section_prices[_key_section_prices] is not None:
                    _field_dict_of_array[_key_section_prices] = [
                        _item.to_dict() for _item in self.section_prices[_key_section_prices]
                    ]
            _dict['section_prices'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of each value in additional (dict)
        _field_dict = {}
        if self.additional:
            for _key_additional in self.additional:
                if self.additional[_key_additional]:
                    _field_dict[_key_additional] = self.additional[_key_additional].to_dict()
            _dict['additional'] = _field_dict
        # set to None if available (nullable) is None
        # and model_fields_set contains the field
        if self.available is None and "available" in self.model_fields_set:
            _dict['available'] = None

        # set to None if removed (nullable) is None
        # and model_fields_set contains the field
        if self.removed is None and "removed" in self.model_fields_set:
            _dict['removed'] = None

        # set to None if added (nullable) is None
        # and model_fields_set contains the field
        if self.added is None and "added" in self.model_fields_set:
            _dict['added'] = None

        # set to None if changed (nullable) is None
        # and model_fields_set contains the field
        if self.changed is None and "changed" in self.model_fields_set:
            _dict['changed'] = None

        # set to None if section_prices (nullable) is None
        # and model_fields_set contains the field
        if self.section_prices is None and "section_prices" in self.model_fields_set:
            _dict['section_prices'] = None

        # set to None if additional (nullable) is None
        # and model_fields_set contains the field
        if self.additional is None and "additional" in self.model_fields_set:
            _dict['additional'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InputEventStatsSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "available": SectionStats.from_dict(obj["available"]) if obj.get("available") is not None else None,
            "removed": InputPlaceSectionStats.from_dict(obj["removed"]) if obj.get("removed") is not None else None,
            "added": InputPriceSectionStats.from_dict(obj["added"]) if obj.get("added") is not None else None,
            "changed": InputPlaceSectionStats.from_dict(obj["changed"]) if obj.get("changed") is not None else None,
            "section_prices": dict(
                (_k,
                        [InputEventStatsSchemaSectionPricesValueInner.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("section_prices", {}).items()
            ),
            "additional": dict(
                (_k, AdditionalSectionPlaceStats.from_dict(_v))
                for _k, _v in obj["additional"].items()
            )
            if obj.get("additional") is not None
            else None
        })
        return _obj


