# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from event_stats_client.models.event_source import EventSource
from typing import Optional, Set
from typing_extensions import Self

class EventStoreStatsRequestSchema(BaseModel):
    """
    EventStoreStatsRequestSchema
    """ # noqa: E501
    event_id: StrictStr
    event_source: EventSource
    event_timestamp: datetime
    venue_size: StrictInt
    available_seats: Optional[Dict[str, Any]]
    update_seats: Optional[Dict[str, Any]]
    sold_seats: Optional[Dict[str, Any]]
    __properties: ClassVar[List[str]] = ["event_id", "event_source", "event_timestamp", "venue_size", "available_seats", "update_seats", "sold_seats"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventStoreStatsRequestSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if available_seats (nullable) is None
        # and model_fields_set contains the field
        if self.available_seats is None and "available_seats" in self.model_fields_set:
            _dict['available_seats'] = None

        # set to None if update_seats (nullable) is None
        # and model_fields_set contains the field
        if self.update_seats is None and "update_seats" in self.model_fields_set:
            _dict['update_seats'] = None

        # set to None if sold_seats (nullable) is None
        # and model_fields_set contains the field
        if self.sold_seats is None and "sold_seats" in self.model_fields_set:
            _dict['sold_seats'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventStoreStatsRequestSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "event_id": obj.get("event_id"),
            "event_source": obj.get("event_source"),
            "event_timestamp": obj.get("event_timestamp"),
            "venue_size": obj.get("venue_size"),
            "available_seats": obj.get("available_seats"),
            "update_seats": obj.get("update_seats"),
            "sold_seats": obj.get("sold_seats")
        })
        return _obj


