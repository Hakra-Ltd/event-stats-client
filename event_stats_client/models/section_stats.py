# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from event_stats_client.models.avg_price import AvgPrice
from event_stats_client.models.max_price import MaxPrice
from event_stats_client.models.median_price import MedianPrice
from event_stats_client.models.min_price import MinPrice
from typing import Optional, Set
from typing_extensions import Self

class SectionStats(BaseModel):
    """
    SectionStats
    """ # noqa: E501
    count: Annotated[int, Field(strict=True, ge=0)]
    min_price: MinPrice
    max_price: MaxPrice
    avg_price: AvgPrice
    median_price: MedianPrice
    __properties: ClassVar[List[str]] = ["count", "min_price", "max_price", "avg_price", "median_price"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SectionStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of min_price
        if self.min_price:
            _dict['min_price'] = self.min_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_price
        if self.max_price:
            _dict['max_price'] = self.max_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of avg_price
        if self.avg_price:
            _dict['avg_price'] = self.avg_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of median_price
        if self.median_price:
            _dict['median_price'] = self.median_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SectionStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "count": obj.get("count"),
            "min_price": MinPrice.from_dict(obj["min_price"]) if obj.get("min_price") is not None else None,
            "max_price": MaxPrice.from_dict(obj["max_price"]) if obj.get("max_price") is not None else None,
            "avg_price": AvgPrice.from_dict(obj["avg_price"]) if obj.get("avg_price") is not None else None,
            "median_price": MedianPrice.from_dict(obj["median_price"]) if obj.get("median_price") is not None else None
        })
        return _obj


